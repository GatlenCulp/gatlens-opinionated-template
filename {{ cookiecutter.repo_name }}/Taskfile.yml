version: '3'

vars:
  PROJECT_NAME: '{{ cookiecutter.repo_name }}'
  PYTHON_VERSION: '{{ cookiecutter.python_version_number }}'
  PYTHON_INTERPRETER: python
  MODULE_NAME: '{{ cookiecutter.module_name }}'

tasks:
  ###############################################################################
  # Dependencies & Environment
  ###############################################################################

  # {%- if cookiecutter.dependency_file != 'none' %}
  requirements:
    desc: Install Python dependencies
    cmds:
      # {%- if "requirements.txt" == cookiecutter.dependency_file %}
      # {%- raw %}
      - '{{.PYTHON_INTERPRETER}} -m pip install -U pip'
      - '{{.PYTHON_INTERPRETER}} -m pip install -r requirements.txt'
      # {%- endraw %}
      # {%- elif "environment.yml" == cookiecutter.dependency_file %}
      # {%- raw %}
      - conda env update --name {{.PROJECT_NAME}} --file environment.yml --prune
      # {%- endraw %}
      # {%- elif "Pipfile" == cookiecutter.dependency_file %}
      - pipenv install
      # {%- endif %}
  # {%- endif %}

  # {%- if cookiecutter.environment_manager != 'none' %}
  create-environment:
    desc: Set up python interpreter environment
    cmds:
      # {%- if cookiecutter.environment_manager == 'conda' %}
      # {%- if cookiecutter.dependency_file != 'environment.yml' %}
      # {%- raw %}
      - conda create --name {{.PROJECT_NAME}} python={{.PYTHON_VERSION}} -y
      - echo ">>> conda env created. Activate with: conda activate {{.PROJECT_NAME}}"
      # {%- endraw %}
      # {%- else %}
      # {%- raw %}
      - conda env create --name {{.PROJECT_NAME}} -f environment.yml
      - echo ">>> conda env created. Activate with: conda activate {{.PROJECT_NAME}}"
      # {%- endraw %}
      # {%- endif %}
      # {%- elif cookiecutter.environment_manager == 'virtualenv' %}
      # {%- raw %}
      - |
        if [ ! -z `which virtualenvwrapper.sh` ]; then 
          source `which virtualenvwrapper.sh`
          mkvirtualenv {{.PROJECT_NAME}} --python={{.PYTHON_INTERPRETER}}
          echo ">>> New virtualenv created. Activate with: workon {{.PROJECT_NAME}}"
        else 
          mkvirtualenv.bat {{.PROJECT_NAME}} --python={{.PYTHON_INTERPRETER}}
          echo ">>> New virtualenv created. Activate with: workon {{.PROJECT_NAME}}"
        fi
      # {%- endraw %}
      # {%- elif cookiecutter.environment_manager == 'pipenv' %}
      # {%- raw %}
      - pipenv --python {{.PYTHON_VERSION}}
      - echo ">>> New pipenv created. Activate with: pipenv shell"
      # {%- endraw %}
      # {%- endif %}
  # {%- endif %}

  ###############################################################################
  # Code Quality
  ###############################################################################

  clean:
    desc: Delete all compiled Python files
    cmds:
      - find . -type f -name "*.py[co]" -delete
      - find . -type d -name "__pycache__" -delete

  lint:
    desc: Lint using flake8 and black
    cmds:
      # {%- raw %}
      - flake8 {{.MODULE_NAME}}
      - isort --check --diff --profile black {{.MODULE_NAME}}
      - black --check --config pyproject.toml {{.MODULE_NAME}}
      # {%- endraw %}

  format:
    desc: Format source code with black
    cmds:
      # {%- raw %}
      - black --config pyproject.toml {{.MODULE_NAME}}
      # {%- endraw %}

  ###############################################################################
  # Data Sync
  ###############################################################################

  # {%- if not cookiecutter.dataset_storage.none %}
  sync-data-down:
    desc: Download data from storage system
    cmds:
      # {%- if cookiecutter.dataset_storage.s3 %}
      - aws s3 sync s3://{{ cookiecutter.dataset_storage.s3.bucket }}/data/ data/{% if cookiecutter.dataset_storage.s3.aws_profile != 'default' %} --profile {{ cookiecutter.dataset_storage.s3.aws_profile }}{% endif %}
      # {%- elif cookiecutter.dataset_storage.azure %}
      - az storage blob download-batch -s {{ cookiecutter.dataset_storage.azure.container }}/data/ -d data/
      # {%- elif cookiecutter.dataset_storage.gcs %}
      - gsutil -m rsync -r gs://{{ cookiecutter.dataset_storage.gcs.bucket }}/data/ data/
      # {%- endif %}

  sync-data-up:
    desc: Upload data to storage system
    cmds:
      # {%- if cookiecutter.dataset_storage.s3 %}
      - aws s3 sync data/ s3://{{ cookiecutter.dataset_storage.s3.bucket }}/data{% if cookiecutter.dataset_storage.s3.aws_profile != 'default' %} --profile {{ cookiecutter.dataset_storage.s3.aws_profile }}{% endif %}
      # {%- elif cookiecutter.dataset_storage.azure %}
      - az storage blob upload-batch -d {{ cookiecutter.dataset_storage.azure.container }}/data/ -s data/
      # {%- elif cookiecutter.dataset_storage.gcs %}
      - gsutil -m rsync -r data/ gs://{{ cookiecutter.dataset_storage.gcs.bucket }}/data/
      # {%- endif %}
  # {%- endif %}

  ###############################################################################
  # Project Tasks
  ###############################################################################

  # {%- if cookiecutter.include_code_scaffold == 'Yes' %}
  data:
    desc: Make dataset
    deps: [requirements]
    cmds:
      # {%- raw %}
      - '{{.PYTHON_INTERPRETER}} {{.MODULE_NAME}}/dataset.py'
      # {%- endraw %}
  # {%- endif %}

  default:
    desc: List all available tasks
    cmds:
      - task --list
